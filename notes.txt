https://www.youtube.com/watch?v=qJq9ZMB2Was

///////////////////////

laravel new example-app
type "none" (front)
type "0" (unit test)
type "yes" (npm install && npm run build)

cd example-app
code ./
composer run dev

extension > SQLite viewer

setup .env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

php artisan migrate

si erreur (https://stackoverflow.com/questions/63015038/laravel-error-1071-key-was-too-long-php-artisan-migrate):
config > database.php > mysql > 'engine' => 'InnoDB ROW_FORMAT=DYNAMIC',


///////////////////////

npm create vite > project name > react > js > 

pour changer de port lorsque j'execute la cmd "npm run dev"
dans le dossier react > package.json > scipts > dev > "vite --port=3000"

///////////////////////

npm i react-router-dom -S

///////////////////////

Pour les requetes http
npm i axios -S

///////////////////////
1:17:00
php artisan make:Controller Api/AuthController

php artisan make:request LoginRequest

php artisan make:request SignupRequest

///////////////////////

Avec Laravel 12,
la documentation et plusieurs articles indiquent que la configuration des routes se fait maintenant via bootstrap/app.php,
avec la méthode withRouting(...). Le RouteServiceProvider n’est plus le point central pour définir les routes.

bootstrap/app.php

<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware): void {
        //
    })
    ->withExceptions(function (Exceptions $exceptions): void {
        //
    })->create();

composer dump-autoload
php artisan route:clear
php artisan config:clear
php artisan optimize:clear

php artisan route:list | grep signup

///////////////////////

php artisan config:publish cors

<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware): void {
        //
        $middleware->prepend(HandleCors::class);
    })
    ->withExceptions(function (Exceptions $exceptions): void {
        //
    })->create();

php artisan optimize:clear
php artisan config:clear
php artisan route:clear

composer require laravel/sanctum

php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
php artisan migrate

Dans app/Models/User.php
namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable;
    ....

Dans bootstrap/app.php
->withMiddleware(function (Middleware $middleware): void {
        //
        $middleware->prepend(HandleCors::class);
        $middleware->statefulApi();
    })

///////////////////////

php artisan make:Controller Api/UserController --model=User --resource --requests --api

/*
If you think of each Eloquent model in your application as a "resource",
it is typical to perform the same sets of actions against each resource in your application.
For example, imagine your application contains a Photo model and a Movie model.
It is likely that users can create, read, update, or delete these resources.

Because of this common use case,
Laravel resource routing assigns the typical create, read, update, and delete ("CRUD") routes to a controller
with a single line of code.
To get started, we can use the make:controller Artisan command's --resource option
to quickly create a controller to handle these actions:

//CRUD
php artisan make:controller PhotoController --resource

Route::resource('photos', PhotoController::class);

API Resource Routes
When declaring resource routes that will be consumed by APIs,
you will commonly want to exclude routes that present HTML templates such as create and edit.
For convenience, you may use the apiResource method to automatically exclude these two routes:

//CRUD API
php artisan make:controller PhotoController --api

Route::apiResource('photos', PhotoController::class);
*/

///////////////////////

use to convert database model to json serializable
c'est ce json qui sera envoyé to the client
php artisan make:Resource UserResource

///////////////////////

type "ssl" dans la barre de recherche

si failed > trois ti points > reinstall

php configuration > 8.4

file manager > zetwalnumerik.fr > public_html > delete default.php

///////////////////////

react folder > create .env.production > VITE_APP_BASE_URL=http://api.monsite.fr

npm run build

public_html > drag n drop tous les fichiers contenu dans le dossier "dist"

public_html > create ".htaccess" >
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . index.html

///////////////////////

type "ssl" dans la barre de recherche

ssh access > ssh status enable

change password

log in to ssh > copy la command > git bash ou powershel > paste command > yes > type mot de passe

clear

ls -la

type "subdomain" dans la barre de recherche

create subdomain > pas de custom
/*
git bash ou powershel > cd domains/monsite.fr/public_html > ls -la

cd api > ls -la
*/

git bash ou powershel > cd domains

github > clone repository button

git bash ou powershel > git clone repository api.monsite.fr > enter

cd api.monsite.fr

https://getcomposer.org/download > Command-line installation > copy
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'ed0feb545ba87161262f2d45a633e34f591ebb3381f2e0063c345ebea4d228dd0043083717770234ec00c5a9f9593792') { echo 'Installer verified'.PHP_EOL; } else { echo 'Installer corrupt'.PHP_EOL; unlink('composer-setup.php'); exit(1); }"
php composer-setup.php
php -r "unlink('composer-setup.php');"

git bash ou powershel > paste cmd line > enter

php composer.phar install

cp .env.example .env

vim .env

type I

APP_NAME="Mon site"
APP_ENV=local
APP_KEY=
APP_DEBUG=false
APP_URL=http://api.monsite.fr

LOG_LEVEL=error

escape button > type :wq

php artisan key:generate --ansi

cd ../

cd monsite.fr/public_html > rm -rf api

//ln target link
//ln [l'emplacement reel du content] [là ou je veux qu'il ya le contenu]

ln -s ~/domains/api.monsite.fr/public api

///////////////////////

type "mysql" dans la barre de recherche

mysql databases

database n user setup

cd ~/domains/api.monsite.fr

vim .env

type I

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=database name
DB_USERNAME=database user
DB_PASSWORD=database pass

escape button > type :wq

php artisan migrate

php artisan db:seed

type "phpmyadmin" dans la barre de recherche